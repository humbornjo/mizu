// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fooapp/namaste/v1/namaste.proto

package namastev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "mizu.example/protogen/fooapp/namaste/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NamasteServiceName is the fully-qualified name of the NamasteService service.
	NamasteServiceName = "fooapp.namaste.v1.NamasteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NamasteServiceNamasteProcedure is the fully-qualified name of the NamasteService's Namaste RPC.
	NamasteServiceNamasteProcedure = "/fooapp.namaste.v1.NamasteService/Namaste"
)

// NamasteServiceClient is a client for the fooapp.namaste.v1.NamasteService service.
type NamasteServiceClient interface {
	Namaste(context.Context) *connect.BidiStreamForClient[v1.NamasteRequest, v1.NamasteResponse]
}

// NewNamasteServiceClient constructs a client for the fooapp.namaste.v1.NamasteService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNamasteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NamasteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	namasteServiceMethods := v1.File_fooapp_namaste_v1_namaste_proto.Services().ByName("NamasteService").Methods()
	return &namasteServiceClient{
		namaste: connect.NewClient[v1.NamasteRequest, v1.NamasteResponse](
			httpClient,
			baseURL+NamasteServiceNamasteProcedure,
			connect.WithSchema(namasteServiceMethods.ByName("Namaste")),
			connect.WithClientOptions(opts...),
		),
	}
}

// namasteServiceClient implements NamasteServiceClient.
type namasteServiceClient struct {
	namaste *connect.Client[v1.NamasteRequest, v1.NamasteResponse]
}

// Namaste calls fooapp.namaste.v1.NamasteService.Namaste.
func (c *namasteServiceClient) Namaste(ctx context.Context) *connect.BidiStreamForClient[v1.NamasteRequest, v1.NamasteResponse] {
	return c.namaste.CallBidiStream(ctx)
}

// NamasteServiceHandler is an implementation of the fooapp.namaste.v1.NamasteService service.
type NamasteServiceHandler interface {
	Namaste(context.Context, *connect.BidiStream[v1.NamasteRequest, v1.NamasteResponse]) error
}

// NewNamasteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNamasteServiceHandler(svc NamasteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	namasteServiceMethods := v1.File_fooapp_namaste_v1_namaste_proto.Services().ByName("NamasteService").Methods()
	namasteServiceNamasteHandler := connect.NewBidiStreamHandler(
		NamasteServiceNamasteProcedure,
		svc.Namaste,
		connect.WithSchema(namasteServiceMethods.ByName("Namaste")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fooapp.namaste.v1.NamasteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NamasteServiceNamasteProcedure:
			namasteServiceNamasteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNamasteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNamasteServiceHandler struct{}

func (UnimplementedNamasteServiceHandler) Namaste(context.Context, *connect.BidiStream[v1.NamasteRequest, v1.NamasteResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("fooapp.namaste.v1.NamasteService.Namaste is not implemented"))
}
