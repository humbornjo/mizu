// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: app_foo/file/v1/file.proto

package filev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	v1 "mizu.example/protogen/app_foo/file/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "app_foo.file.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceGetFileProcedure is the fully-qualified name of the FileService's GetFile RPC.
	FileServiceGetFileProcedure = "/app_foo.file.v1.FileService/GetFile"
	// FileServiceUploadFileProcedure is the fully-qualified name of the FileService's UploadFile RPC.
	FileServiceUploadFileProcedure = "/app_foo.file.v1.FileService/UploadFile"
	// FileServiceDownloadFileProcedure is the fully-qualified name of the FileService's DownloadFile
	// RPC.
	FileServiceDownloadFileProcedure = "/app_foo.file.v1.FileService/DownloadFile"
)

// FileServiceClient is a client for the app_foo.file.v1.FileService service.
type FileServiceClient interface {
	// GetFile is used to retrieve file meta info
	GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error)
	// UploadFile is used to upload file with stream
	UploadFile(context.Context) *connect.ClientStreamForClient[v1.UploadFileRequest, v1.UploadFileResponse]
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	DownloadFile(context.Context, *connect.Request[v1.DownloadFileRequest]) (*connect.ServerStreamForClient[httpbody.HttpBody], error)
}

// NewFileServiceClient constructs a client for the app_foo.file.v1.FileService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fileServiceMethods := v1.File_app_foo_file_v1_file_proto.Services().ByName("FileService").Methods()
	return &fileServiceClient{
		getFile: connect.NewClient[v1.GetFileRequest, v1.GetFileResponse](
			httpClient,
			baseURL+FileServiceGetFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("GetFile")),
			connect.WithClientOptions(opts...),
		),
		uploadFile: connect.NewClient[v1.UploadFileRequest, v1.UploadFileResponse](
			httpClient,
			baseURL+FileServiceUploadFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("UploadFile")),
			connect.WithClientOptions(opts...),
		),
		downloadFile: connect.NewClient[v1.DownloadFileRequest, httpbody.HttpBody](
			httpClient,
			baseURL+FileServiceDownloadFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("DownloadFile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	getFile      *connect.Client[v1.GetFileRequest, v1.GetFileResponse]
	uploadFile   *connect.Client[v1.UploadFileRequest, v1.UploadFileResponse]
	downloadFile *connect.Client[v1.DownloadFileRequest, httpbody.HttpBody]
}

// GetFile calls app_foo.file.v1.FileService.GetFile.
func (c *fileServiceClient) GetFile(ctx context.Context, req *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error) {
	return c.getFile.CallUnary(ctx, req)
}

// UploadFile calls app_foo.file.v1.FileService.UploadFile.
func (c *fileServiceClient) UploadFile(ctx context.Context) *connect.ClientStreamForClient[v1.UploadFileRequest, v1.UploadFileResponse] {
	return c.uploadFile.CallClientStream(ctx)
}

// DownloadFile calls app_foo.file.v1.FileService.DownloadFile.
func (c *fileServiceClient) DownloadFile(ctx context.Context, req *connect.Request[v1.DownloadFileRequest]) (*connect.ServerStreamForClient[httpbody.HttpBody], error) {
	return c.downloadFile.CallServerStream(ctx, req)
}

// FileServiceHandler is an implementation of the app_foo.file.v1.FileService service.
type FileServiceHandler interface {
	// GetFile is used to retrieve file meta info
	GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error)
	// UploadFile is used to upload file with stream
	UploadFile(context.Context, *connect.ClientStream[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error)
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	DownloadFile(context.Context, *connect.Request[v1.DownloadFileRequest], *connect.ServerStream[httpbody.HttpBody]) error
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceMethods := v1.File_app_foo_file_v1_file_proto.Services().ByName("FileService").Methods()
	fileServiceGetFileHandler := connect.NewUnaryHandler(
		FileServiceGetFileProcedure,
		svc.GetFile,
		connect.WithSchema(fileServiceMethods.ByName("GetFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceUploadFileHandler := connect.NewClientStreamHandler(
		FileServiceUploadFileProcedure,
		svc.UploadFile,
		connect.WithSchema(fileServiceMethods.ByName("UploadFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceDownloadFileHandler := connect.NewServerStreamHandler(
		FileServiceDownloadFileProcedure,
		svc.DownloadFile,
		connect.WithSchema(fileServiceMethods.ByName("DownloadFile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/app_foo.file.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceGetFileProcedure:
			fileServiceGetFileHandler.ServeHTTP(w, r)
		case FileServiceUploadFileProcedure:
			fileServiceUploadFileHandler.ServeHTTP(w, r)
		case FileServiceDownloadFileProcedure:
			fileServiceDownloadFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_foo.file.v1.FileService.GetFile is not implemented"))
}

func (UnimplementedFileServiceHandler) UploadFile(context.Context, *connect.ClientStream[v1.UploadFileRequest]) (*connect.Response[v1.UploadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_foo.file.v1.FileService.UploadFile is not implemented"))
}

func (UnimplementedFileServiceHandler) DownloadFile(context.Context, *connect.Request[v1.DownloadFileRequest], *connect.ServerStream[httpbody.HttpBody]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("app_foo.file.v1.FileService.DownloadFile is not implemented"))
}
