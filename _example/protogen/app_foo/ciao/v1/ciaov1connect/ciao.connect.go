// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: app_foo/ciao/v1/ciao.proto

package ciaov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "mizu.example/protogen/app_foo/ciao/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CiaoServiceName is the fully-qualified name of the CiaoService service.
	CiaoServiceName = "app_foo.ciao.v1.CiaoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CiaoServiceCiaoProcedure is the fully-qualified name of the CiaoService's Ciao RPC.
	CiaoServiceCiaoProcedure = "/app_foo.ciao.v1.CiaoService/Ciao"
)

// CiaoServiceClient is a client for the app_foo.ciao.v1.CiaoService service.
type CiaoServiceClient interface {
	Ciao(context.Context, *connect.Request[v1.CiaoRequest]) (*connect.Response[v1.CiaoResponse], error)
}

// NewCiaoServiceClient constructs a client for the app_foo.ciao.v1.CiaoService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCiaoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CiaoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	ciaoServiceMethods := v1.File_app_foo_ciao_v1_ciao_proto.Services().ByName("CiaoService").Methods()
	return &ciaoServiceClient{
		ciao: connect.NewClient[v1.CiaoRequest, v1.CiaoResponse](
			httpClient,
			baseURL+CiaoServiceCiaoProcedure,
			connect.WithSchema(ciaoServiceMethods.ByName("Ciao")),
			connect.WithClientOptions(opts...),
		),
	}
}

// ciaoServiceClient implements CiaoServiceClient.
type ciaoServiceClient struct {
	ciao *connect.Client[v1.CiaoRequest, v1.CiaoResponse]
}

// Ciao calls app_foo.ciao.v1.CiaoService.Ciao.
func (c *ciaoServiceClient) Ciao(ctx context.Context, req *connect.Request[v1.CiaoRequest]) (*connect.Response[v1.CiaoResponse], error) {
	return c.ciao.CallUnary(ctx, req)
}

// CiaoServiceHandler is an implementation of the app_foo.ciao.v1.CiaoService service.
type CiaoServiceHandler interface {
	Ciao(context.Context, *connect.Request[v1.CiaoRequest]) (*connect.Response[v1.CiaoResponse], error)
}

// NewCiaoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCiaoServiceHandler(svc CiaoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ciaoServiceMethods := v1.File_app_foo_ciao_v1_ciao_proto.Services().ByName("CiaoService").Methods()
	ciaoServiceCiaoHandler := connect.NewUnaryHandler(
		CiaoServiceCiaoProcedure,
		svc.Ciao,
		connect.WithSchema(ciaoServiceMethods.ByName("Ciao")),
		connect.WithHandlerOptions(opts...),
	)
	return "/app_foo.ciao.v1.CiaoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CiaoServiceCiaoProcedure:
			ciaoServiceCiaoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCiaoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCiaoServiceHandler struct{}

func (UnimplementedCiaoServiceHandler) Ciao(context.Context, *connect.Request[v1.CiaoRequest]) (*connect.Response[v1.CiaoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_foo.ciao.v1.CiaoService.Ciao is not implemented"))
}
